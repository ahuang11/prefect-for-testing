{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"prefect-for-testing","text":"<p>              </p>"},{"location":"#welcome","title":"Welcome!","text":"<p>My personal sandbox for testing!</p>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#python-setup","title":"Python setup","text":"<p>Requires an installation of Python 3.7+.</p> <p>We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv.</p> <p>These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation.</p>"},{"location":"#installation","title":"Installation","text":"<p>Install <code>prefect-for-testing</code> with <code>pip</code>:</p> <pre><code>pip install prefect-for-testing\n</code></pre> <p>A list of available blocks in <code>prefect-for-testing</code> and their setup instructions can be found here.</p>"},{"location":"#write-and-run-a-flow","title":"Write and run a flow","text":"<pre><code>from prefect import flow\nfrom prefect_for_testing.tasks import (\n    goodbye_prefect_for_testing,\n    hello_prefect_for_testing,\n)\n\n# Use `with_options` to customize options on any existing task or flow\n\ncustom_goodbye_prefect_for_testing = goodbye_prefect_for_testing.with_options(\n    name=\"My custom task name\",\n    retries=2,\n    retry_delay_seconds=10,\n)\n\n@flow\ndef example_flow():\n    hello_prefect_for_testing\n    custom_goodbye_prefect_for_testing\n\nexample_flow()\n</code></pre> <p>For more tips on how to use tasks and flows in a Collection, check out Using Collections!</p>"},{"location":"#blocks-catalog","title":"Blocks Catalog","text":"<p>Below is a list of Blocks available for registration in <code>prefect-for-testing</code>.</p> <p>To register blocks in this module to view and edit them on Prefect Cloud: <pre><code>prefect block register -m prefect_for_testing\n</code></pre> Note, to use the <code>load</code> method on Blocks, you must already have a block document saved through code or saved through the UI.</p>"},{"location":"#blocks-module","title":"Blocks Module","text":"<p>FortestingBlock</p> <p>To load the FortestingBlock: <pre><code>from prefect import flow\nfrom prefect_for_testing.blocks import FortestingBlock\n\n@flow\ndef my_flow():\n    my_block = FortestingBlock.load(\"MY_BLOCK_NAME\")\n\nmy_flow()\n</code></pre></p>"},{"location":"#resources","title":"Resources","text":"<p>If you encounter any bugs while using <code>prefect-for-testing</code>, feel free to open an issue in the prefect-for-testing repository.</p> <p>If you have any questions or issues while using <code>prefect-for-testing</code>, you can find help in either the Prefect Discourse forum or the Prefect Slack community.</p> <p>Feel free to star or watch <code>prefect-for-testing</code> for updates too!</p>"},{"location":"#contributing","title":"Contributing","text":"<p>If you'd like to help contribute to fix an issue or add a feature to <code>prefect-for-testing</code>, please propose changes through a pull request from a fork of the repository.</p> <p>Here are the steps: 1. Fork the repository 2. Clone the forked repository 3. Install the repository and its dependencies: <pre><code>pip install -e \".[dev]\"\n</code></pre> 4. Make desired changes 5. Add tests 6. Insert an entry to CHANGELOG.md 7. Install <code>pre-commit</code> to perform quality checks prior to commit: <pre><code>pre-commit install\n</code></pre> 8. <code>git commit</code>, <code>git push</code>, and create a pull request</p>"},{"location":"flows/","title":"Flows","text":""},{"location":"flows/#prefect_for_testing.flows","title":"<code>prefect_for_testing.flows</code>","text":"<p>This is an example flows module</p>"},{"location":"flows/#prefect_for_testing.flows-classes","title":"Classes","text":""},{"location":"flows/#prefect_for_testing.flows-functions","title":"Functions","text":""},{"location":"flows/#prefect_for_testing.flows.hello_and_goodbye","title":"<code>hello_and_goodbye</code>","text":"<p>Sample flow that says hello and goodbye!</p>  Source code in <code>prefect_for_testing/flows.py</code> <pre><code>@flow\ndef hello_and_goodbye():\n    \"\"\"\n    Sample flow that says hello and goodbye!\n    \"\"\"\n    FortestingBlock.seed_value_for_example()\n    block = FortestingBlock.load(\"sample-block\")\n\n    print(hello_prefect_for_testing())\n    print(f\"The block's value: {block.value}\")\n    print(goodbye_prefect_for_testing())\n    return \"Done\"\n</code></pre>"},{"location":"tasks/","title":"Tasks","text":""},{"location":"tasks/#prefect_for_testing.tasks","title":"<code>prefect_for_testing.tasks</code>","text":"<p>This is an example tasks module</p>"},{"location":"tasks/#prefect_for_testing.tasks-functions","title":"Functions","text":""},{"location":"tasks/#prefect_for_testing.tasks.goodbye_prefect_for_testing","title":"<code>goodbye_prefect_for_testing</code>","text":"<p>Sample task that says goodbye!</p> <p>Returns:</p>    Type Description      <code>str</code>  <p>A farewell for your collection</p>     Source code in <code>prefect_for_testing/tasks.py</code> <pre><code>@task\ndef goodbye_prefect_for_testing() -&gt; str:\n    \"\"\"\n    Sample task that says goodbye!\n\n    Returns:\n        A farewell for your collection\n    \"\"\"\n    return \"Goodbye, prefect-for-testing!\"\n</code></pre>"},{"location":"tasks/#prefect_for_testing.tasks.hello_prefect_for_testing","title":"<code>hello_prefect_for_testing</code>","text":"<p>Sample task that says hello!</p> <p>Returns:</p>    Type Description      <code>str</code>  <p>A greeting for your collection</p>     Source code in <code>prefect_for_testing/tasks.py</code> <pre><code>@task\ndef hello_prefect_for_testing() -&gt; str:\n    \"\"\"\n    Sample task that says hello!\n\n    Returns:\n        A greeting for your collection\n    \"\"\"\n    return \"Hello, prefect-for-testing!\"\n</code></pre>"}]}